package com.nanaimostudio.utils {	import flash.display.FrameLabel;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.EventDispatcher;	/**	 * ...	 * @author	Boon Chew	 * @usage 	Use FrameLabelAction to make it trigger methods within your movieclip when it hits the frame labels	 * on your movieclip.	 * You can manually add action (or method handler) associated with a frame label via addAction, 	 * or you can use the convenience method to automatically create actions associated with all frame labels in a movieclip.	 * Action created this way takes the same name as the frame label.  For example, if you have a frame label called transitionIn,	 * your movieclip's transitionIn method (assuming there is one) will be caused when the playhead reaches it.	 * Each action will only be triggered once.	 * FrameLabelAction can either be a unit of action, or it can be a container that contains unit of actions.	 * @version 	1.0	*/	public class FrameLabelAction extends EventDispatcher	{	// Used by FrameLabelAction (container)		// look up frame label action associated with frame number		private var actionMap:Object;		// keeps the last action in the action queue		private var lastFrameLabelAction:FrameLabelAction;		// the number of child FrameLabelAction		private var _numChildren:int;		// is frame checking in progress		private var _running:Boolean;			// Used by FrameLabelAction (unit of action)		// source of frame label		private var _target:MovieClip;		// name of frame label to check		private var _label:FrameLabel;		// method handler to call when frame label is encountered		private var _handler:Function;		// optional params passed to handler		private var handlerParams:Object;		// is this the last action on the queue?		private var _isLastAction:Boolean;		// the number of times it has been triggered		private var _triggerCount:int;				public static const ACTION_TRIGGERED:String 		= "FrameLabelAction.ActionTriggered";		public static const ALL_ACTIONS_TRIGGERED:String 	= "FrameLabelAction.AllActionsTriggered";				// Convenience method that creates an action container and associate method handler with		// frame labels of a movieclip		public static function createActions(target:MovieClip):FrameLabelAction		{			var actionContainer:FrameLabelAction = new FrameLabelAction();			actionContainer.target = target;						var frameLabels:Array = target.currentLabels;			for each (var frameLabel:FrameLabel in frameLabels)			{				//baconLog.log("Adding method handler for label: " + frameLabel.name);				// create unit of action that will be triggered when the label is encountered				actionContainer.addAction(target, frameLabel);				actionContainer.numChildren++;			}						return actionContainer;		}				public function FrameLabelAction()		{			// A unit of action has no children, but an action container will			numChildren = 0;			triggerCount = 0;		}				public function reset():void		{			actionMap = { };			numChildren = 0;			triggerCount = 0;		}				public function start():void		{			// Only action container can be started			//trace("FrameLabelAction.start - numChildren: " + this.numChildren + " running: " + running + " target: " + target);			if (this.numChildren == 0) return;						for each (var action:FrameLabelAction in actionMap)			{				action.triggerCount = 0;			}						running = true;			target.addEventListener(Event.ENTER_FRAME, checkFrameLabel);		}				public function stop():void		{			if (!running) return;			running = false;			target.removeEventListener(Event.ENTER_FRAME, checkFrameLabel);		}				// Check frame label and make it go to the appropriate method when it's reached		private function checkFrameLabel(e:Event):void 		{			//trace("checkFrameLabel: " + target.currentFrame);			var action:FrameLabelAction = this.getActionByFrame(target.currentFrame);			// Call action if there is one associated with it and it has never been called before						if (action != null && action.triggerCount == 0)			{				//trace("action: " + action + " " + target.currentFrame);								// Remove timer if the last frame label has been reached				action.triggerCount++;				action.perform();				dispatchEvent(new Event(ACTION_TRIGGERED));								if (action.isLastAction)				{					target.removeEventListener(Event.ENTER_FRAME, checkFrameLabel);					dispatchEvent(new Event(ALL_ACTIONS_TRIGGERED));				}			}		}				public function addActionByLabel(target:MovieClip, label:String, handler:Function = null, handlerParams:Object = null):void		{			var foundLabel:Boolean;			var frameLabels:Array = target.currentLabels;			for each (var frameLabel:FrameLabel in frameLabels)			{				if (frameLabel.name == label)				{					//trace("addActionByLabel: " + frameLabel.frame + " - " + frameLabel.name);					foundLabel = true;					this.target = target;					this.numChildren++;					addAction(target, frameLabel, handler, handlerParams);					break;				}			}						if (!foundLabel)			{				throw new Error("[FrameLabelAction] addActionByLabel failed. Invalid Frame Label: " + label);			}		}				/*		 * Add action to be triggered when frame label is encountered.		 * If no handler is specified, the handler will be assumed to have the same name as the frame label		 * Handler scope is assumed to be the movieclip that contains the frame labels		*/		public function addAction(target:MovieClip, frameLabel:FrameLabel, handler:Function = null, handlerParams:Object = null):void		{			if (actionMap == null)			{				actionMap = new Object();			}						var frameNumber:String = frameLabel.frame.toString();			var frameAction:FrameLabelAction = new FrameLabelAction();			frameAction.target			= target;			frameAction.label			= frameLabel;			frameAction.handler			= handler;			frameAction.handlerParams	= handlerParams;						// associate frame number with frame action			actionMap[frameNumber] = frameAction;			if (lastFrameLabelAction != null)			{				lastFrameLabelAction.isLastAction = false;			}						frameAction.isLastAction = true;			lastFrameLabelAction = frameAction;		}				private function hasActionForFrame(value:int):Boolean		{			return getActionByFrame(value) != null;		}				private function getActionByFrame(value:int):FrameLabelAction		{			return actionMap[value.toString()];		}				internal function get isLastAction():Boolean		{			return _isLastAction;		}				internal function set isLastAction(value:Boolean):void 		{			_isLastAction = value;		}				// perform action associated with frame label		public function perform():void		{			if (handler != null)			{				if (handlerParams != null)				{					handler.apply(null, [ handlerParams ]);				}				else				{					handler();				}			}		}				public function get handler():Function		{			return _handler;			}				public function set handler(value:Function):void 		{			if (value == null)			{				// if no handler is specified and movieclip has defined a method with the same name as the label, use that as the method handler for this label				//trace("target.hasOwnProperty(label.name): " + target.hasOwnProperty(label.name));				if (target.hasOwnProperty(label.name) && target[label.name] is Function)				{					//trace("using default handler: " + label.name + " " + target[label.name] + " " + typeof(target[label.name]));					_handler = target[label.name] as Function;				}				else				{					_handler = null;				}			}			else			{				_handler = value;			}		}				public function get label():FrameLabel { return _label; }		public function set label(value:FrameLabel):void 		{			_label = value;		}				public function get target():MovieClip { return _target; }		public function set target(value:MovieClip):void 		{			_target = value;		}				public function get numChildren():int { return _numChildren; }				public function set numChildren(value:int):void 		{			_numChildren = value;		}				public function get running():Boolean { return _running; }				public function set running(value:Boolean):void 		{			_running = value;		}				public function get triggerCount():int { return _triggerCount; }				public function set triggerCount(value:int):void 		{			_triggerCount = value;		}				public override function toString():String		{			return "[FrameLabelAction] frame #" + label.frame + " - name: " + label.name + " - numChildren: " + numChildren;		}	}}