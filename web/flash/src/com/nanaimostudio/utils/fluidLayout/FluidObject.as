package com.nanaimostudio.utils.fluidLayout{	/* class needed on resize Event */	import com.greensock.TweenMax;	import com.nanaimostudio.utils.TraceUtility;	import flash.events.Event;	/* classes needed for MovieClip and DisplayObject */	import flash.display.*;	/* classes needed for Easing Animation */	//import fl.transitions.Tween;	//import fl.transitions.easing.*;	import com.greensock.easing.Strong;		public class FluidObject {		public static var minStageWidth:int = 0;		public static var minStageHeight:int = 0;				/* alignment parameters */		protected var _param:Object;		/* target object to be monitored */		protected var _target:DisplayObject;		/* stage instance of the flash document */		protected var _stage:Stage;		/* Setter for the alignment param */		public function set param(value:Object):void {			_param = value;			this.reposition();		}		/* Constructor of the class */		public function FluidObject(target:DisplayObject, paramObj:Object) {			/* Assign the instance variables */			_target = target;			_param = paramObj;			_stage = target.stage;			/* add event handler for stage resize */			_stage.addEventListener(Event.RESIZE,onStageResize);			/* reposition the object with the alignment setting applied*/			this.reposition();		}		/* Function that reposition the monitored object */		protected function reposition():void {						var stageW:int =_stage.stageWidth;			var stageH:int = _stage.stageHeight;						if (stageW < minStageWidth)			{				stageW = minStageWidth;			}						if (stageH < minStageHeight)			{				stageH = minStageHeight;			}						/* update the x and y value of the monitored object */			/* set the duration of the easing animation (seconds) */			var duration:Number =0.5;			/* declare the new X/Y value */			var newX:Number =_target.x;			var newY:Number =_target.y;			/* calculate the new X value based on the stage Width */			if (_param.x != undefined) {				newX = (stageW * _param.x) + _param.offsetX;			}			/* calculate the new Y value based on the stage Height */			if (_param.y != undefined) {				newY = (stageH * _param.y) + _param.offsetY;			}			/* Tell flash to tween the target object to the new X/Y position */			//new Tween(_target,"x", Strong.easeOut,_target.x, newX, duration, true);			//new Tween(_target,"y", Strong.easeOut,_target.y, newY, duration, true);					TweenMax.to(_target, duration, { x: newX, y: newY, ease:Strong.easeOut } );						TraceUtility.debug(this, "****target: " + _target);			TraceUtility.debug(this, "stageW: " + stageW + " stageH: " + stageH + " actual stageW: " + _stage.stageWidth + " actual stageH: " + _stage.stageHeight);			TraceUtility.debug(this, "targetX: " + _target.x + " newX: " + newX);			TraceUtility.debug(this, "targetY: " + _target.y + " newY: " + newY);			TraceUtility.debug(this, "****************************");		}		protected function onStageResize(e):void {			/* reposition the target */			this.reposition();		}	}}